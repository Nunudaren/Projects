<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:cjjrabbit="http://www.caijiajia.cn/schema/cjjrabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
      http://www.springframework.org/schema/util
      http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.caijiajia.cn/schema/cjjrabbit http://www.caijiajia.cn/schema/cjjrabbit/cjj-rabbit.xsd">

    <import resource="classpath:applicationContext-base.xml"/>
    <import resource="classpath:applicationContext-confplusclient.xml"/>
    <import resource="classpath:applicationContext-redisclient.xml"/>
    <import resource="classpath:applicationContext-sequenceclient.xml"/>
    <import resource="classpath:applicationContext-distributedlock.xml"/>
    <!--<import resource="classpath:applicationContext-rabbitmq.xml"/>-->
    <import resource="classpath:applicationContext-persistence.xml"/>

    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url"
                  value="jdbc:mysql://${mysql.address.apiapply}/credittools?useUnicode=true&amp;characterEncoding=utf8"/>
        <property name="username" value="${mysql.username.apiapply}"/>
        <property name="password" value="${mysql.password.apiapply}"/>
        <property name="initialSize" value="${jdbc.connection.initialSize}"/>
        <property name="minIdle" value="${jdbc.connection.minIdle}"/>
        <property name="maxActive" value="${jdbc.connection.maxActive}"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="defaultTransactionIsolation" value="2"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="600"/>
        <property name="logAbandoned" value="true"/>
        <property name="jdbcInterceptors" value="ConnectionState;StatementFinalizer"/>
    </bean>

    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
          lazy-init="true">
        <property name="corePoolSize" value="20"/>
        <property name="maxPoolSize" value="100"/>
        <property name="queueCapacity" value="1000"/>
        <property name="keepAliveSeconds" value="300"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy"/>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <rabbit:connection-factory id="connectionFactory" addresses="${rabbitmq.addresses}" username="${rabbitmq.username}"
                               password="${rabbitmq.password}" publisher-confirms="true"/>
    <!-- 管理组件 -->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- 存放消费失败消息的queue -->

    <!-- 消息发送组件，使用jsonMessageConverter -->
    <bean id="rabbitTemplate" class="cn.caijiajia.rabbitmq.client.CjjRabbitTemplate">
        <constructor-arg ref="connectionFactory"/>
        <property name="messageConverter" ref="jsonConverter"/>
        <property name="retryTemplate" ref="retryTemplate"/>
        <property name="recoveryCallback" ref="recoveryCallback"/>
    </bean>

    <!-- 消费重试Advice -->
    <bean id="retryAdvice"
          class="org.springframework.amqp.rabbit.config.StatelessRetryOperationsInterceptorFactoryBean">
        <property name="messageRecoverer" ref="rejectAndDontRequeueRecoverer"/>
        <property name="retryOperations" ref="retryTemplate"/>
    </bean>
    <bean id="rejectAndDontRequeueRecoverer"
          class="org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer"/>

    <!-- 使用json进行消息序列化和反序列化 -->
    <bean id="jsonConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

    <!-- 重试策略 -->
    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="60000"/>
                <property name="multiplier" value="1.0"/>
                <property name="maxInterval" value="1200000"/>
            </bean>
        </property>
    </bean>

    <!-- 消息所有重发失败后的回调方法 -->
    <bean id="recoveryCallback" class="cn.caijiajia.rabbitmq.client.CjjRabbitRecoveryCallback"/>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean id="confplusUrl" class="java.lang.String">
        <constructor-arg value="${url.confplus}"/>
    </bean>

    <bean class="cn.caijiajia.loanutil.pipeline.PipelineMapper" id="pipelineMapper">
        <!--PipelineTask 表对应的 mapper-->
        <constructor-arg name="taskMapperClassName" value="cn.caijiajia.apiapply.mapper.PipelineTaskMapper"/>
        <!--PipelineProcess 表对应的 mapper-->
        <constructor-arg name="processMapperClassName" value="cn.caijiajia.apiapply.mapper.PipelineProcessMapper"/>
        <!-- 事务管理器 -->
        <constructor-arg name="txManager" ref="transactionManager"/>
    </bean>

    <bean class="cn.caijiajia.loanutil.pipeline.PipelineTaskFactory" id="pipelineTaskFactory">
        <constructor-arg name="pipelineMapper" ref="pipelineMapper"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:spring-config.properties</value>
        </property>
    </bean>
    <bean id="httpClient" class="cn.caijiajia.framework.httpclient.HttpClientTemplate">
        <constructor-arg type="int" value="200"/>
        <constructor-arg type="int" value="200"/>
        <constructor-arg type="int" value="10000"/>
        <constructor-arg type="int" value="20000"/>
    </bean>

    <bean id="zooKeeperTemplate" init-method="init" destroy-method="destroy"
          class="cn.caijiajia.framework.zookeeper.ZooKeeperTemplate">
        <property name="connectString" value="${zooKeeper.connectString}"/>
        <property name="sessionTimeout" value="15000"/>
        <property name="connectionTimeout" value="5000"/>
        <property name="connectionStateListeners" ref="connectionStateListeners"/>
    </bean>
    <util:list id="connectionStateListeners">
        <ref bean="jobExecutorRegister"/>
    </util:list>

    <bean id="s3Service" class="cn.caijiajia.awsservice.S3Service">
        <constructor-arg value="${aws.s3.accessKey}"/>
        <constructor-arg value="${aws.s3.secretKey}"/>
    </bean>

    <bean id="s3StoreService" class="cn.caijiajia.s3util.mapper.S3StoreService" lazy-init="true">
        <property name="s3StoreBucketName" value="${aws.s3.bucketName.apiapply}"/>
        <property name="s3StoreBucketNameInc" value="${aws.s3.bucketName.creditdataInc}"/>
    </bean>
    <bean id="dataStoreMapper"
          class="cn.caijiajia.s3util.mapper.S3BoStoreMapper"
          lazy-init="true">
    </bean>
    <bean id="s3StoreMapper"
          class="cn.caijiajia.s3util.mapper.S3StoreMapper"
          lazy-init="true">
    </bean>
</beans>
